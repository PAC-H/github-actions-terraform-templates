# =============================================================================
# TERRAFORM MAIN DEPLOYMENT PIPELINE
# =============================================================================
# This workflow handles the complete deployment lifecycle for both staging and
# production environments with automated validation, compliance checks, and
# approval gates. It implements GitFlow branching strategy where:
# - develop branch deploys to staging ONLY
# - main branch deploys to production (after staging success)
# =============================================================================

name: 'Terraform Main Deployment'

# =============================================================================
# TRIGGERS: When this workflow runs
# =============================================================================
on:
  push:
    branches: [develop, main]  # Auto-trigger on push to these branches
    paths: ['terraform/**', 'config/**', '.github/workflows/**']  # Only when relevant files change
  pull_request:
    branches: [main]  # Run validation on PRs to main branch
    paths: ['terraform/**', 'config/**', '.github/workflows/**']
  workflow_dispatch:  # Allow manual triggering with environment selection
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# =============================================================================
# PERMISSIONS: OIDC requires specific permissions for Azure authentication
# =============================================================================
permissions:
  id-token: write      # Required for OIDC token generation
  contents: read       # Read repository contents
  pull-requests: write # Comment on PRs with results

jobs:
  # ===========================================================================
  # CONFIGURATION LOADING JOB
  # ===========================================================================
  # Loads environment-specific configurations from JSON files and makes them
  # available to other jobs. This centralizes configuration management.
  # Note: Azure authentication credentials are now managed via GitHub Secrets
  # ===========================================================================
  load-config:
    runs-on: self-hosted
    outputs:
      base-config: ${{ steps.load-base.outputs.config }}
      staging-config: ${{ steps.load-staging.outputs.config }}
      production-config: ${{ steps.load-production.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      
      # Load shared configuration (Teams webhook, Terraform versions, etc.)
      # Note: Azure credentials are now securely managed via GitHub Secrets
      - name: Load base config
        id: load-base
        run: |
          CONFIG=$(cat config/base.json | jq -c .)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT
          
      # Load staging-specific configuration (backend, deployment settings)
      - name: Load staging config
        id: load-staging
        run: |
          CONFIG=$(cat config/staging.json | jq -c .)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT
          
      # Load production-specific configuration
      - name: Load production config
        id: load-production
        run: |
          CONFIG=$(cat config/production.json | jq -c .)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT

  # ===========================================================================
  # STAGING VALIDATION JOB
  # ===========================================================================
  # Validates staging environment for all branches and PRs
  # Always runs to ensure staging changes are valid
  # ===========================================================================

  validation-staging:
    runs-on: self-hosted
    needs: load-config
    environment: staging  # Set environment context for proper secret access
    steps:
      - uses: actions/checkout@v4
      
      # Setup Terraform with caching to improve performance
      - name: Setup Terraform
        uses: ./.github/actions/setup-terraform
        with:
          terraform_version: ${{ fromJson(needs.load-config.outputs.base-config).terraform.version }}
          working_directory: terraform/environments/staging
          environment: staging
          
      # Authenticate with Azure using OIDC (environment-specific secrets)
      - name: Azure Login
        uses: ./.github/actions/azure-login
        with:
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}
          
      # Configure remote state backend for staging (must run before validation)
      - name: Configure backend
        working-directory: terraform/environments/staging
        run: |
          BACKEND_CONFIG=$(echo '${{ needs.load-config.outputs.staging-config }}' | jq -r '.terraform.backend')
          
          # Initialize Terraform with staging backend configuration
          terraform init \
            -backend-config="storage_account_name=$(echo $BACKEND_CONFIG | jq -r '.storage_account_name')" \
            -backend-config="container_name=$(echo $BACKEND_CONFIG | jq -r '.container_name')" \
            -backend-config="resource_group_name=$(echo $BACKEND_CONFIG | jq -r '.resource_group_name')" \
            -backend-config="key=$(echo $BACKEND_CONFIG | jq -r '.key')"
            
      # Ensure Terraform code follows formatting standards
      - name: Terraform Format Check
        working-directory: terraform/environments/staging
        run: terraform fmt -check -recursive
        
      # Validate Terraform syntax and configuration (requires providers to be initialized)
      - name: Terraform Lint
        working-directory: terraform/environments/staging
        run: terraform validate
            
      # Generate execution plan and save it for later use in deployment
      - name: Terraform Plan
        working-directory: terraform/environments/staging
        run: |
          terraform plan -out=tfplan-staging
          
      # Store plan as artifact for use in deployment jobs (avoids re-planning)
      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-staging
          path: terraform/environments/staging/tfplan-staging
          retention-days: 30

  # ===========================================================================
  # PRODUCTION VALIDATION JOB
  # ===========================================================================
  # Validates production environment ONLY for main branch and production manual dispatch
  # This prevents develop branch from accessing production resources



  # ===========================================================================
  validation-production:
    # Only validate production for main branch or manual production dispatch
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') || github.event_name == 'pull_request'
    runs-on: self-hosted
    needs: load-config
    environment: production  # Set environment context for proper secret access
    steps:
      - uses: actions/checkout@v4
      
      # Setup Terraform with caching to improve performance
      - name: Setup Terraform
        uses: ./.github/actions/setup-terraform
        with:
          terraform_version: ${{ fromJson(needs.load-config.outputs.base-config).terraform.version }}
          working_directory: terraform/environments/production
          environment: production
          
      # Authenticate with Azure using OIDC (environment-specific secrets)
      - name: Azure Login
        uses: ./.github/actions/azure-login
        with:
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}
          
      # Configure remote state backend for production (must run before validation)
      - name: Configure backend
        working-directory: terraform/environments/production
        run: |
          BACKEND_CONFIG=$(echo '${{ needs.load-config.outputs.production-config }}' | jq -r '.terraform.backend')
          
          # Initialize Terraform with production backend configuration
          terraform init \
            -backend-config="storage_account_name=$(echo $BACKEND_CONFIG | jq -r '.storage_account_name')" \
            -backend-config="container_name=$(echo $BACKEND_CONFIG | jq -r '.container_name')" \
            -backend-config="resource_group_name=$(echo $BACKEND_CONFIG | jq -r '.resource_group_name')" \
            -backend-config="key=$(echo $BACKEND_CONFIG | jq -r '.key')"
            
      # Ensure Terraform code follows formatting standards
      - name: Terraform Format Check
        working-directory: terraform/environments/production
        run: terraform fmt -check -recursive
        
      # Validate Terraform syntax and configuration (requires providers to be initialized)
      - name: Terraform Lint
        working-directory: terraform/environments/production
        run: terraform validate
            
      # Generate execution plan and save it for later use in deployment
      - name: Terraform Plan
        working-directory: terraform/environments/production
        run: |
          terraform plan -out=tfplan-production
          
      # Store plan as artifact for use in deployment jobs (avoids re-planning)
      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-production
          path: terraform/environments/production/tfplan-production
          retention-days: 30

  # ===========================================================================
  # STAGING COMPLIANCE SCANNING JOB
  # ===========================================================================
  # Runs security and policy compliance checks for staging environment
  # ===========================================================================
  compliance-staging:
    runs-on: self-hosted
    needs: [load-config, validation-staging]
    environment: staging  # Set environment context for proper secret access


    steps:
      - uses: actions/checkout@v4
      
      # Authenticate with Azure to check policy compliance (environment-specific secrets)
      - name: Azure Login
        uses: ./.github/actions/azure-login
        with:
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}
          
      # Check existing resources against Azure Policy definitions
      - name: Run Azure Policy Compliance Check
        run: |
          echo "Running Azure Policy compliance check for staging"
          # Query policy compliance state for staging resource groups
          az policy state list --resource-group "rg-staging" --all || true

  # ===========================================================================
  # PRODUCTION COMPLIANCE SCANNING JOB
  # ===========================================================================
  # Runs security and policy compliance checks for production environment
  # Only runs for main branch or production manual dispatch
  # ===========================================================================
  compliance-production:
    # Only run compliance for production when appropriate
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production') || github.event_name == 'pull_request'
    runs-on: self-hosted
    needs: [load-config, validation-production]
    environment: production  # Set environment context for proper secret access
    steps:
      - uses: actions/checkout@v4
      
      # Authenticate with Azure to check policy compliance (environment-specific secrets)
      - name: Azure Login
        uses: ./.github/actions/azure-login
        with:
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}
          
      # Check existing resources against Azure Policy definitions
      - name: Run Azure Policy Compliance Check
        run: |
          echo "Running Azure Policy compliance check for production"
          # Query policy compliance state for production resource groups
          az policy state list --resource-group "rg-production" --all || true

  # ===========================================================================
  # STAGING DEPLOYMENT JOB
  # ===========================================================================
  # Deploys to staging environment with the following safeguards:
  # 1. Only runs for develop branch or manual dispatch
  # 2. Requires manual approval (configured in GitHub environment settings)
  # 3. Uses pre-generated plan from validation job
  # 4. Sends Teams notifications for visibility
  # ===========================================================================
  deploy-staging:
    # Only deploy to staging from develop branch or manual trigger
    if: github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch'
    runs-on: self-hosted
    needs: [load-config, validation-staging, compliance-staging]
    environment: staging  # Triggers GitHub environment protection rules and manual approval
    steps:
      - uses: actions/checkout@v4
      
      # Setup Terraform with same configuration as validation
      - name: Setup Terraform
        uses: ./.github/actions/setup-terraform
        with:
          terraform_version: ${{ fromJson(needs.load-config.outputs.base-config).terraform.version }}
          working_directory: terraform/environments/staging
          environment: staging
          
      # Authenticate with Azure for deployment operations (environment-specific secrets)
      - name: Azure Login
        uses: ./.github/actions/azure-login
        with:
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}
          
      # Download the pre-generated plan from validation job
      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-staging
          path: terraform/environments/staging
          
      # Reinitialize Terraform backend for deployment context
      - name: Configure backend
        working-directory: terraform/environments/staging
        run: |
          BACKEND_CONFIG=$(echo '${{ needs.load-config.outputs.staging-config }}' | jq -r '.terraform.backend')
          
          terraform init \
            -backend-config="storage_account_name=$(echo $BACKEND_CONFIG | jq -r '.storage_account_name')" \
            -backend-config="container_name=$(echo $BACKEND_CONFIG | jq -r '.container_name')" \
            -backend-config="resource_group_name=$(echo $BACKEND_CONFIG | jq -r '.resource_group_name')" \
            -backend-config="key=$(echo $BACKEND_CONFIG | jq -r '.key')"
            
      # Apply the pre-approved plan (no additional confirmation needed)
      - name: Terraform Apply
        working-directory: terraform/environments/staging
        run: terraform apply tfplan-staging
        
      # Notify team of successful staging deployment
      - name: Notify success
        if: success()
        uses: ./.github/actions/teams-notification
        with:
          webhook_url: ${{ fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook }}
          status: success
          environment: staging
          message: "Staging deployment completed successfully"
          
      # Notify team if staging deployment fails
      - name: Notify failure
        if: failure()
        uses: ./.github/actions/teams-notification
        with:
          webhook_url: ${{ fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook }}
          status: failure
          environment: staging
          message: "Staging deployment failed"

  # ===========================================================================
  # PRODUCTION DEPLOYMENT JOB
  # ===========================================================================
  # Deploys to production with maximum safety:
  # 1. Only runs for main branch or manual production dispatch
  # 2. Requires successful staging deployment first
  # 3. Requires manual approval via GitHub environment protection
  # 4. Uses pre-generated and validated plan
  # 5. Full notification coverage for audit trail
  # ===========================================================================
  deploy-production:
    # Production deployment conditions: main branch OR manual production trigger
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    runs-on: self-hosted
    needs: [load-config, validation-production, compliance-production, deploy-staging]  # Must wait for staging success
    environment: production  # Triggers GitHub environment protection rules (manual approval)
    steps:
      - uses: actions/checkout@v4
      
      # Setup Terraform for production deployment
      - name: Setup Terraform
        uses: ./.github/actions/setup-terraform
        with:
          terraform_version: ${{ fromJson(needs.load-config.outputs.base-config).terraform.version }}
          working_directory: terraform/environments/production
          environment: production
          
      # Authenticate with Azure using production credentials (environment-specific secrets)
      - name: Azure Login
        uses: ./.github/actions/azure-login
        with:
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}
          
      # Download the production plan generated during validation
      - name: Download plan artifact
        uses: actions/download-artifact@v4
        with:
          name: tfplan-production
          path: terraform/environments/production
          
      # Reinitialize Terraform backend for production deployment
      - name: Configure backend
        working-directory: terraform/environments/production
        run: |
          BACKEND_CONFIG=$(echo '${{ needs.load-config.outputs.production-config }}' | jq -r '.terraform.backend')
          
          terraform init \
            -backend-config="storage_account_name=$(echo $BACKEND_CONFIG | jq -r '.storage_account_name')" \
            -backend-config="container_name=$(echo $BACKEND_CONFIG | jq -r '.container_name')" \
            -backend-config="resource_group_name=$(echo $BACKEND_CONFIG | jq -r '.resource_group_name')" \
            -backend-config="key=$(echo $BACKEND_CONFIG | jq -r '.key')"
            
      # Apply the pre-approved production plan
      - name: Terraform Apply
        working-directory: terraform/environments/production
        run: terraform apply tfplan-production
        
      # Notify team of successful production deployment
      - name: Notify success
        if: success()
        uses: ./.github/actions/teams-notification
        with:
          webhook_url: ${{ fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook }}
          status: success
          environment: production
          message: "Production deployment completed successfully"
          
      # Critical: Notify team immediately if production deployment fails
      - name: Notify failure
        if: failure()
        uses: ./.github/actions/teams-notification
        with:
          webhook_url: ${{ fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook }}
          status: failure
          environment: production
          message: "Production deployment failed" 