# =============================================================================
# TERRAFORM STATE MANAGEMENT PIPELINE
# =============================================================================
# This workflow provides critical state management operations for Terraform:
#
# 1. UNLOCK OPERATION: Force-unlock stuck Terraform state files
# 2. BACKUP OPERATION: Create timestamped backups of state files
# 3. RESTORE OPERATION: Restore state files from previous backups
#
# CRITICAL SAFETY NOTES:
# - These operations directly manipulate Terraform state files
# - Improper use can cause data loss or infrastructure corruption
# - Always ensure you have recent backups before performing operations
# - Test restore operations in non-production environments first
# =============================================================================

name: 'Terraform State Management'

# =============================================================================
# TRIGGERS: Manual operations + automated weekly backups
# =============================================================================
on:
  workflow_dispatch:  # Manual execution with operation selection
    inputs:
      operation:
        description: 'State operation to perform'
        required: true
        type: choice
        options:
          - unlock    # Force unlock stuck state file
          - backup    # Create manual backup of state files
          - restore   # Restore state from backup
      environment:
        description: 'Environment'
        required: true
        type: choice
        options:
          - staging
          - production
      lock_id:
        description: 'Lock ID (required for unlock operation)'
        required: false
      backup_name:
        description: 'Backup name (required for restore operation)'
        required: false
  schedule:
    - cron: '0 2 * * 0'  # Weekly backup on Sundays at 2 AM UTC (off-peak hours)

# =============================================================================
# PERMISSIONS: Enhanced permissions needed for state operations
# =============================================================================
permissions:
  id-token: write  # Required for OIDC authentication
  contents: read   # Read repository contents and configurations

jobs:
  # ===========================================================================
  # CONFIGURATION LOADING JOB
  # ===========================================================================
  # Loads environment configurations and backup storage settings
  # Critical for proper state file location and backup destinations
  # Note: Azure authentication credentials are now managed via GitHub Secrets
  # ===========================================================================
  load-config:
    runs-on: self-hosted
    outputs:
      base-config: ${{ steps.load-base.outputs.config }}
      staging-config: ${{ steps.load-staging.outputs.config }}
      production-config: ${{ steps.load-production.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      
      # Load base config containing backup storage account details and notification settings
      # Note: Azure credentials are now securely managed via GitHub Secrets
      - name: Load base config
        id: load-base
        run: |
          CONFIG=$(cat config/base.json | jq -c .)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT
          
      # Load environment-specific state storage configurations
      - name: Load staging config
        id: load-staging
        run: |
          CONFIG=$(cat config/staging.json | jq -c .)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT
          
      - name: Load production config
        id: load-production
        run: |
          CONFIG=$(cat config/production.json | jq -c .)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT

  # ===========================================================================
  # STATE MANAGEMENT JOB
  # ===========================================================================
  # Performs critical Terraform state operations with comprehensive safety measures:
  # - State unlock: Remove stuck locks safely
  # - State backup: Create timestamped backups for recovery
  # - State restore: Restore from previous backups when needed
  # 
  # SAFETY: All operations require environment approval for production
  # ===========================================================================
  state-operation:
    runs-on: self-hosted
    needs: load-config
    environment: ${{ github.event.inputs.environment || 'staging' }}  # Set environment context for proper secret access
    steps:
      - uses: actions/checkout@v4
      
      # Setup Terraform for state operations
      - name: Setup Terraform
        uses: ./.github/actions/setup-terraform
        with:
          terraform_version: ${{ fromJson(needs.load-config.outputs.base-config).terraform.version }}
          working_directory: terraform/environments/${{ github.event.inputs.environment || 'staging' }}
          environment: ${{ github.event.inputs.environment || 'staging' }}
          
      # Authenticate with Azure for state operations (environment-specific secrets)
      - name: Azure Login
        uses: ./.github/actions/azure-login
        with:
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}
          
      # UNLOCK OPERATION: Force remove Terraform state lock
      - name: Unlock state
        if: github.event.inputs.operation == 'unlock'
        working-directory: terraform/environments/${{ github.event.inputs.environment }}
        run: |
          # Initialize Terraform to access the locked state
          ENV_CONFIG='${{ github.event.inputs.environment == 'staging' && needs.load-config.outputs.staging-config || needs.load-config.outputs.production-config }}'
          BACKEND_CONFIG=$(echo $ENV_CONFIG | jq -r '.terraform.backend')
          
          terraform init \
            -backend-config="storage_account_name=$(echo $BACKEND_CONFIG | jq -r '.storage_account_name')" \
            -backend-config="container_name=$(echo $BACKEND_CONFIG | jq -r '.container_name')" \
            -backend-config="resource_group_name=$(echo $BACKEND_CONFIG | jq -r '.resource_group_name')" \
            -backend-config="key=$(echo $BACKEND_CONFIG | jq -r '.key')"
            
          # Force unlock using the provided lock ID
          terraform force-unlock ${{ github.event.inputs.lock_id }}
          
      # BACKUP OPERATION: Create timestamped backups of all state files
      - name: Backup state files
        if: github.event.inputs.operation == 'backup' || github.event_name == 'schedule'
        run: |
          # Create unique timestamp for this backup
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          
          # Download and backup staging state file
          STAGING_CONFIG='${{ needs.load-config.outputs.staging-config }}'
          STAGING_BACKEND=$(echo $STAGING_CONFIG | jq -r '.terraform.backend')
          
          az storage blob download \
            --account-name $(echo $STAGING_BACKEND | jq -r '.storage_account_name') \
            --container-name $(echo $STAGING_BACKEND | jq -r '.container_name') \
            --name $(echo $STAGING_BACKEND | jq -r '.key') \
            --file staging-${TIMESTAMP}.tfstate
            
          # Download and backup production state file
          PRODUCTION_CONFIG='${{ needs.load-config.outputs.production-config }}'
          PRODUCTION_BACKEND=$(echo $PRODUCTION_CONFIG | jq -r '.terraform.backend')
          
          az storage blob download \
            --account-name $(echo $PRODUCTION_BACKEND | jq -r '.storage_account_name') \
            --container-name $(echo $PRODUCTION_BACKEND | jq -r '.container_name') \
            --name $(echo $PRODUCTION_BACKEND | jq -r '.key') \
            --file production-${TIMESTAMP}.tfstate
            
          # Upload both backups to the designated backup storage account
          BASE_CONFIG='${{ needs.load-config.outputs.base-config }}'
          BACKUP_STORAGE=$(echo $BASE_CONFIG | jq -r '.storage')
          
          az storage blob upload \
            --account-name $(echo $BACKUP_STORAGE | jq -r '.backup_account') \
            --container-name $(echo $BACKUP_STORAGE | jq -r '.backup_container') \
            --name staging-${TIMESTAMP}.tfstate \
            --file staging-${TIMESTAMP}.tfstate
            
          az storage blob upload \
            --account-name $(echo $BACKUP_STORAGE | jq -r '.backup_account') \
            --container-name $(echo $BACKUP_STORAGE | jq -r '.backup_container') \
            --name production-${TIMESTAMP}.tfstate \
            --file production-${TIMESTAMP}.tfstate
            
      # RESTORE OPERATION: Restore state file from backup (DANGEROUS!)
      - name: Restore state file
        if: github.event.inputs.operation == 'restore'
        run: |
          # Download the specified backup file
          BASE_CONFIG='${{ needs.load-config.outputs.base-config }}'
          BACKUP_STORAGE=$(echo $BASE_CONFIG | jq -r '.storage')
          
          az storage blob download \
            --account-name $(echo $BACKUP_STORAGE | jq -r '.backup_account') \
            --container-name $(echo $BACKUP_STORAGE | jq -r '.backup_container') \
            --name ${{ github.event.inputs.backup_name }} \
            --file restored.tfstate
            
          # Overwrite the current state file with the backup
          ENV_CONFIG='${{ github.event.inputs.environment == 'staging' && needs.load-config.outputs.staging-config || needs.load-config.outputs.production-config }}'
          BACKEND_CONFIG=$(echo $ENV_CONFIG | jq -r '.terraform.backend')
          
          az storage blob upload \
            --account-name $(echo $BACKEND_CONFIG | jq -r '.storage_account_name') \
            --container-name $(echo $BACKEND_CONFIG | jq -r '.container_name') \
            --name $(echo $BACKEND_CONFIG | jq -r '.key') \
            --file restored.tfstate \
            --overwrite
            
      # Notify team of successful state operation
      - name: Notify success
        if: success() && fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook != '' && fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook != 'REPLACE_WITH_YOUR_TEAMS_WEBHOOK_URL'
        uses: ./.github/actions/teams-notification
        with:
          webhook_url: ${{ fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook }}
          status: success
          environment: ${{ github.event.inputs.environment || 'all' }}
          message: "State ${{ github.event.inputs.operation || 'backup' }} operation completed successfully"
          
      # Critical: Alert team immediately if state operation fails
      - name: Notify failure
        if: failure() && fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook != '' && fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook != 'REPLACE_WITH_YOUR_TEAMS_WEBHOOK_URL'
        uses: ./.github/actions/teams-notification
        with:
          webhook_url: ${{ fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook }}
          status: failure
          environment: ${{ github.event.inputs.environment || 'all' }}
          message: "State ${{ github.event.inputs.operation || 'backup' }} operation failed" 