# =============================================================================
# TERRAFORM COMPLIANCE PIPELINE
# =============================================================================
# This workflow provides comprehensive security and compliance validation for
# Terraform infrastructure using multiple scanning tools:
#
# 1. TFLINT: Terraform-specific linting and best practices
# 2. CHECKOV: Security vulnerability scanning and compliance checks
# 3. AZURE POLICY: Live policy compliance validation against Azure policies
#
# Key Features:
# - Multi-tool security scanning for comprehensive coverage
# - PR integration with automatic compliance reports
# - Azure Policy integration for live environment checking
# - Artifact storage for compliance audit trails
# - Teams notifications for compliance status
# =============================================================================

name: 'Terraform Compliance'

# =============================================================================
# TRIGGERS: PR validation + manual compliance checks
# =============================================================================
on:
  pull_request:
    branches: [main, develop]      # Run compliance checks on all PRs
    paths: ['terraform/**']        # Only when Terraform files are modified
  workflow_dispatch:               # Manual execution for compliance audits
    inputs:
      environment:
        description: 'Environment to check'
        required: true
        type: choice
        options:
          - staging
          - production
          - all                    # Check all environments

# =============================================================================
# PERMISSIONS: Enhanced permissions for PR comments and Azure access
# =============================================================================
permissions:
  id-token: write       # Required for OIDC authentication
  contents: read        # Read repository contents and configurations
  pull-requests: write  # Comment on PRs with compliance results

jobs:
  # ===========================================================================
  # CONFIGURATION LOADING JOB
  # ===========================================================================
  # Standard configuration loading for consistent environment settings
  # Note: Azure authentication credentials are now managed via GitHub Secrets
  # ===========================================================================
  load-config:
    runs-on: self-hosted
    outputs:
      base-config: ${{ steps.load-base.outputs.config }}
      staging-config: ${{ steps.load-staging.outputs.config }}
      production-config: ${{ steps.load-production.outputs.config }}
    steps:
      - uses: actions/checkout@v4
      
      # Load shared configuration for notifications and Terraform versions
      # Note: Azure credentials are now securely managed via GitHub Secrets
      - name: Load base config
        id: load-base
        run: |
          CONFIG=$(cat config/base.json | jq -c .)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT
          
      # Load environment-specific configurations for backend access
      - name: Load staging config
        id: load-staging
        run: |
          CONFIG=$(cat config/staging.json | jq -c .)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT
          
      - name: Load production config
        id: load-production
        run: |
          CONFIG=$(cat config/production.json | jq -c .)
          echo "config=$CONFIG" >> $GITHUB_OUTPUT

  # ===========================================================================
  # COMPLIANCE CHECK JOB
  # ===========================================================================
  # Performs comprehensive security and compliance scanning using:
  # - TFLint for Terraform best practices and syntax issues
  # - Checkov for security vulnerabilities and misconfigurations
  # - Azure Policy for live environment policy compliance
  #
  # Uses matrix strategy to check multiple environments in parallel
  # ===========================================================================
  compliance-check:
    runs-on: self-hosted
    needs: load-config
    strategy:
      matrix:
        # Dynamic environment selection based on input or default to both
        environment: ${{ github.event.inputs.environment == 'all' && fromJson('["staging", "production"]') || github.event.inputs.environment && fromJson(format('["{0}"]', github.event.inputs.environment)) || fromJson('["staging", "production"]') }}
    environment: ${{ matrix.environment }}  # Set environment context for proper secret access
    steps:
      - uses: actions/checkout@v4
      
      # Setup Terraform for plan generation and validation
      - name: Setup Terraform
        uses: ./.github/actions/setup-terraform
        with:
          terraform_version: ${{ fromJson(needs.load-config.outputs.base-config).terraform.version }}
          working_directory: terraform/environments/${{ matrix.environment }}
          environment: ${{ matrix.environment }}
          
      # Authenticate with Azure for policy compliance checks (environment-specific secrets)
      - name: Azure Login
        uses: ./.github/actions/azure-login
        with:
          tenant_id: ${{ secrets.AZURE_TENANT_ID }}
          subscription_id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client_id: ${{ secrets.AZURE_CLIENT_ID }}
          
      # Initialize Terraform to generate plan for compliance scanning
      - name: Configure backend
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          # Initialize with environment-specific backend
          ENV_CONFIG='${{ matrix.environment == 'staging' && needs.load-config.outputs.staging-config || needs.load-config.outputs.production-config }}'
          BACKEND_CONFIG=$(echo $ENV_CONFIG | jq -r '.terraform.backend')
          
          terraform init \
            -backend-config="storage_account_name=$(echo $BACKEND_CONFIG | jq -r '.storage_account_name')" \
            -backend-config="container_name=$(echo $BACKEND_CONFIG | jq -r '.container_name')" \
            -backend-config="resource_group_name=$(echo $BACKEND_CONFIG | jq -r '.resource_group_name')" \
            -backend-config="key=$(echo $BACKEND_CONFIG | jq -r '.key')"
            
      # Generate plan for compliance analysis (in JSON format for tools)
      - name: Generate plan for compliance check
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          terraform plan -out=compliance-plan-${{ matrix.environment }}
          # Convert plan to JSON for security scanning tools
          terraform show -json compliance-plan-${{ matrix.environment }} > compliance-plan-${{ matrix.environment }}.json
          
      # Install and run TFLint for Terraform best practices
      - name: Install tflint
        run: |
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          
      - name: Run tflint security checks
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          # Initialize TFLint with latest rule definitions
          tflint --init
          # Run TFLint and generate JSON report (continue on failures for reporting)
          tflint --format json > tflint-report-${{ matrix.environment }}.json || true
          
      # Install and run Checkov for security vulnerability scanning
      - name: Install checkov
        run: |
          pip3 install checkov
          
      - name: Run checkov security scan
        working-directory: terraform/environments/${{ matrix.environment }}
        run: |
          # Scan the Terraform plan for security issues and misconfigurations
          checkov -f compliance-plan-${{ matrix.environment }}.json --framework terraform_plan --output json > checkov-report-${{ matrix.environment }}.json || true
          
      # Check live Azure Policy compliance for existing resources
      - name: Check Azure Policy compliance
        run: |
          echo "Checking Azure Policy compliance for ${{ matrix.environment }} environment..."
          
          # Query resource groups that match the environment naming pattern
          RESOURCE_GROUPS=$(az group list --query "[?contains(name, '${{ matrix.environment }}')].name" -o tsv)
          
          # Initialize compliance report structure
          echo '{"environment": "${{ matrix.environment }}", "policy_states": []}' > policy-compliance-${{ matrix.environment }}.json
          
          # Check policy compliance for each resource group
          for rg in $RESOURCE_GROUPS; do
            echo "Checking resource group: $rg"
            # Query policy compliance state and append to temporary file
            az policy state list --resource-group "$rg" --query '[].{policyDefinitionName: policyDefinitionName, complianceState: complianceState, resourceId: resourceId}' >> policy-states-temp.json || true
          done
          
          # Merge policy states into main compliance report
          if [ -f policy-states-temp.json ]; then
            jq '.policy_states += input' policy-compliance-${{ matrix.environment }}.json policy-states-temp.json > temp.json
            mv temp.json policy-compliance-${{ matrix.environment }}.json
            rm policy-states-temp.json
          fi
          
      # Generate comprehensive compliance summary report
      - name: Generate compliance summary
        run: |
          # Create markdown report combining all compliance check results
          cat > compliance-summary-${{ matrix.environment }}.md << EOF
          # Compliance Report - ${{ matrix.environment }} Environment
          
          ## TFLint Security Checks
          \`\`\`json
          $(cat terraform/environments/${{ matrix.environment }}/tflint-report-${{ matrix.environment }}.json 2>/dev/null || echo "{}")
          \`\`\`
          
          ## Checkov Security Scan
          \`\`\`json
          $(cat terraform/environments/${{ matrix.environment }}/checkov-report-${{ matrix.environment }}.json 2>/dev/null || echo "{}")
          \`\`\`
          
          ## Azure Policy Compliance
          \`\`\`json
          $(cat policy-compliance-${{ matrix.environment }}.json 2>/dev/null || echo "{}")
          \`\`\`
          
          ## Summary
          - **Environment**: ${{ matrix.environment }}
          - **Scan Date**: $(date)
          - **Repository**: ${{ github.repository }}
          - **Commit**: ${{ github.sha }}
          EOF
          
      # Store all compliance reports as artifacts for audit trail
      - name: Upload compliance reports
        uses: actions/upload-artifact@v4
        with:
          name: compliance-report-${{ matrix.environment }}
          path: |
            terraform/environments/${{ matrix.environment }}/tflint-report-${{ matrix.environment }}.json
            terraform/environments/${{ matrix.environment }}/checkov-report-${{ matrix.environment }}.json
            policy-compliance-${{ matrix.environment }}.json
            compliance-summary-${{ matrix.environment }}.md
          retention-days: 30
          
      # Post compliance summary as PR comment for visibility
      - name: Comment PR with compliance results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              // Read the generated compliance summary
              const summary = fs.readFileSync('compliance-summary-${{ matrix.environment }}.md', 'utf8');
              // Post as comment on the PR
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: summary
              });
            } catch (error) {
              console.log('Could not read compliance summary file');
            }
            
      # Notify team of compliance check completion
      - name: Notify compliance results
        if: fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook != '' && fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook != 'REPLACE_WITH_YOUR_TEAMS_WEBHOOK_URL'
        uses: ./.github/actions/teams-notification
        with:
          webhook_url: ${{ fromJson(needs.load-config.outputs.base-config).notifications.teams_webhook }}
          status: success
          environment: ${{ matrix.environment }}
          message: "Compliance check completed for ${{ matrix.environment }}. Check artifacts for detailed results." 